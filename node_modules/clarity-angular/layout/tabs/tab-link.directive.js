/*
 * Copyright (c) 2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ComponentFactoryResolver, Directive, ElementRef, HostListener, Inject, Input, ViewContainerRef } from "@angular/core";
import { IF_ACTIVE_ID, IfActiveService } from "../../utils/conditional/if-active.service";
import { TemplateRefContainer } from "../../utils/template-ref/template-ref-container";
import { AriaService } from "./aria-service";
var nbTabLinkComponents = 0;
var TabLinkDirective = (function () {
    function TabLinkDirective(ifActiveService, id, ariaService, el, cfr, viewContainerRef) {
        this.ifActiveService = ifActiveService;
        this.id = id;
        this.ariaService = ariaService;
        this.el = el;
        this.cfr = cfr;
        this.viewContainerRef = viewContainerRef;
        if (!this.tabLinkId) {
            this.tabLinkId = "clr-tab-link-" + (nbTabLinkComponents++);
        }
        // Tab links can be rendered in one of two places: in the main area or inside the overflow dropdown menu.
        // Here, we create a container so that its template can be used to create embeddedView on the fly.
        // See TabsService's renderView() method and how it's used in Tabs class for an example.
        var factory = this.cfr.resolveComponentFactory(TemplateRefContainer);
        this.templateRefContainer =
            this.viewContainerRef.createComponent(factory, 1, undefined, [[this.el.nativeElement]]).instance;
        // if there's no active tab, set the one associated with this link as active
        // it will be overridden if a tab created after this one sets it explicitly
        // TODO: when we have another component using IfActiveService, the same logic might be
        // needed. If this is a recurring pattern, let's consider moving this logic to IfActiveService.
        if (!this.ifActiveService.current) {
            this.ifActiveService.current = id;
        }
    }
    Object.defineProperty(TabLinkDirective.prototype, "ariaControls", {
        get: function () {
            return this.ariaService.ariaControls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabLinkDirective.prototype, "tabLinkId", {
        get: function () {
            return this.ariaService.ariaLabelledBy;
        },
        set: function (id) {
            this.ariaService.ariaLabelledBy = id;
        },
        enumerable: true,
        configurable: true
    });
    TabLinkDirective.prototype.activate = function () {
        this.ifActiveService.current = this.id;
    };
    Object.defineProperty(TabLinkDirective.prototype, "active", {
        get: function () {
            return this.ifActiveService.current === this.id;
        },
        enumerable: true,
        configurable: true
    });
    return TabLinkDirective;
}());
export { TabLinkDirective };
TabLinkDirective.decorators = [
    { type: Directive, args: [{
                selector: "[clrTabLink]",
                host: {
                    "[id]": "tabLinkId",
                    "[attr.aria-selected]": "active",
                    "[attr.aria-controls]": "ariaControls",
                    "role": "presentation",
                    "[class.btn]": "true",
                    "[class.btn-link]": "!inOverflow",
                    "[class.nav-link]": "!inOverflow",
                    "[class.nav-item]": "!inOverflow",
                    "[class.active]": "active"
                }
            },] },
];
/** @nocollapse */
TabLinkDirective.ctorParameters = function () { return [
    { type: IfActiveService, },
    { type: undefined, decorators: [{ type: Inject, args: [IF_ACTIVE_ID,] },] },
    { type: AriaService, },
    { type: ElementRef, },
    { type: ComponentFactoryResolver, },
    { type: ViewContainerRef, },
]; };
TabLinkDirective.propDecorators = {
    'inOverflow': [{ type: Input, args: ["clrTabLinkInOverflow",] },],
    'tabLinkId': [{ type: Input, args: ["id",] },],
    'activate': [{ type: HostListener, args: ["click",] },],
};
//# sourceMappingURL=tab-link.directive.js.map
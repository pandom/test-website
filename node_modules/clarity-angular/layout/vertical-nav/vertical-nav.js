/**
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output } from "@angular/core";
import { VerticalNavGroupService } from "./providers/vertical-nav-group.service";
import { VerticalNavIconService } from "./providers/vertical-nav-icon.service";
import { VerticalNavService } from "./providers/vertical-nav.service";
var VerticalNav = (function () {
    function VerticalNav(_verticalNavService, _verticalNavIconService, _verticalNavGroupService) {
        var _this = this;
        this._verticalNavService = _verticalNavService;
        this._verticalNavIconService = _verticalNavIconService;
        this._verticalNavGroupService = _verticalNavGroupService;
        this._collapsedChanged = new EventEmitter(true);
        this._sub = this._verticalNavService.collapsedChanged.subscribe(function (value) {
            _this._collapsedChanged.emit(value);
        });
    }
    Object.defineProperty(VerticalNav.prototype, "collapsible", {
        get: function () {
            return this._verticalNavService.collapsible;
        },
        set: function (value) {
            this._verticalNavService.collapsible = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VerticalNav.prototype, "collapsed", {
        get: function () {
            return this._verticalNavService.collapsed;
        },
        set: function (value) {
            this._verticalNavService.collapsed = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VerticalNav.prototype, "hasNavGroups", {
        get: function () {
            return this._verticalNavGroupService.navGroups.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VerticalNav.prototype, "hasIcons", {
        get: function () {
            return this._verticalNavIconService.hasIcons;
        },
        enumerable: true,
        configurable: true
    });
    VerticalNav.prototype.toggleByButton = function () {
        this.collapsed = !this.collapsed;
    };
    VerticalNav.prototype.ngOnDestroy = function () {
        this._sub.unsubscribe();
    };
    return VerticalNav;
}());
export { VerticalNav };
VerticalNav.decorators = [
    { type: Component, args: [{
                selector: "clr-vertical-nav",
                template: "\n      <button type=\"button\" class=\"nav-trigger\"\n              [class.on-collapse]=\"collapsed\"\n              (click)=\"toggleByButton()\"\n              *ngIf=\"collapsible\">\n          <clr-icon shape=\"angle-double\" class=\"nav-trigger-icon\" [attr.dir]=\"(this.collapsed) ? 'right' : 'left'\"></clr-icon>\n      </button>\n      <!-- Click handler on .nav-content is bad but required :-( -->\n      <div class=\"nav-content\">\n          <ng-content></ng-content>\n          <button (click)=\"collapsed = false\" class=\"nav-btn\" *ngIf=\"collapsible && collapsed\"></button>\n      </div>\n    ",
                providers: [VerticalNavService, VerticalNavIconService, VerticalNavGroupService],
                host: {
                    "class": "clr-vertical-nav",
                    "[class.is-collapsed]": "collapsed",
                    "[class.has-nav-groups]": "hasNavGroups",
                    "[class.has-icons]": "hasIcons"
                }
            },] },
];
/** @nocollapse */
VerticalNav.ctorParameters = function () { return [
    { type: VerticalNavService, },
    { type: VerticalNavIconService, },
    { type: VerticalNavGroupService, },
]; };
VerticalNav.propDecorators = {
    'collapsible': [{ type: Input, args: ["clrVerticalNavCollapsible",] },],
    'collapsed': [{ type: Input, args: ["clrVerticalNavCollapsed",] },],
    '_collapsedChanged': [{ type: Output, args: ["clrVerticalNavCollapsedChange",] },],
};
//# sourceMappingURL=vertical-nav.js.map
/**
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { animate, state, style, transition, trigger } from "@angular/animations";
import { Component, EventEmitter, HostBinding, Input, Output } from "@angular/core";
import { Expand } from "../../utils/expand/providers/expand";
import { VerticalNavGroupService } from "./providers/vertical-nav-group.service";
import { VerticalNavService } from "./providers/vertical-nav.service";
var EXPANDED_STATE = "expanded";
var COLLAPSED_STATE = "collapsed";
var VerticalNavGroup = (function () {
    function VerticalNavGroup(_itemExpand, _verticalNavGroupService, _verticalNavService) {
        var _this = this;
        this._itemExpand = _itemExpand;
        this._verticalNavGroupService = _verticalNavGroupService;
        this._verticalNavService = _verticalNavService;
        this.wasExpanded = false;
        this.expandedChange = new EventEmitter(true);
        this._subscriptions = [];
        this._expandAnimationState = COLLAPSED_STATE;
        this._verticalNavGroupService.registerNavGroup(this);
        // FIXME: This subscription handles a corner case
        // Vertical Nav collapse requires the animation to run first and then
        // remove the nodes from the DOM. If the user directly sets the input
        // on the clrIfExpanded directive, we have no chance to run the animation
        // and wait for it to complete. This subscription makes sure that the
        // animation states are correct for that edge case.
        this._subscriptions.push(this._itemExpand.expandChange.subscribe(function (value) {
            if (value && _this.expandAnimationState === COLLAPSED_STATE) {
                if (_this._verticalNavService.collapsed) {
                    _this._verticalNavService.collapsed = false;
                }
                _this.expandAnimationState = EXPANDED_STATE;
            }
            else if (!value && _this.expandAnimationState === EXPANDED_STATE) {
                _this.expandAnimationState = COLLAPSED_STATE;
            }
        }));
        // If the nav is collapsing, close the open nav group + save its state
        // If the nav is expanding, expand if the previous state was expanding
        this._subscriptions.push(this._verticalNavService.animateOnCollapsed.subscribe(function (goingToCollapse) {
            if (goingToCollapse && _this.expanded) {
                _this.wasExpanded = true;
                _this.expandAnimationState = COLLAPSED_STATE;
            }
            else if (!goingToCollapse && _this.wasExpanded) {
                _this.expandGroup();
                _this.wasExpanded = false;
            }
        }));
    }
    Object.defineProperty(VerticalNavGroup.prototype, "expanded", {
        get: function () {
            return this._itemExpand.expanded;
        },
        set: function (value) {
            if (this._itemExpand.expanded !== value) {
                this._itemExpand.expanded = value;
                this.expandedChange.emit(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VerticalNavGroup.prototype, "userExpandedInput", {
        set: function (value) {
            value = !!value;
            if (this.expanded !== value) {
                // We have to call toggleExpand because some cases require animations to occur first
                // Directly setting the Expand service value skips the animation and can result in
                // nodes in the DOM but the nav group still being collapsed
                this.toggleExpand();
            }
        },
        enumerable: true,
        configurable: true
    });
    VerticalNavGroup.prototype.expandGroup = function () {
        this.expanded = true;
        // Expanded animation occurs after Expand.expand is set to true
        this.expandAnimationState = EXPANDED_STATE;
    };
    VerticalNavGroup.prototype.collapseGroup = function () {
        // If a Vertical Nav Group toggle button is clicked while the Vertical Nav is in Collapsed state,
        // the Vertical Nav should be expanded first.
        this.expandAnimationState = COLLAPSED_STATE;
    };
    // closes a group after the collapse animation
    VerticalNavGroup.prototype.expandAnimationDone = function ($event) {
        if ($event.toState === COLLAPSED_STATE) {
            this.expanded = false;
        }
    };
    Object.defineProperty(VerticalNavGroup.prototype, "expandAnimationState", {
        get: function () {
            return this._expandAnimationState;
        },
        set: function (value) {
            if (value !== this._expandAnimationState) {
                this._expandAnimationState = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    VerticalNavGroup.prototype.toggleExpand = function () {
        if (this.expanded) {
            this.collapseGroup();
        }
        else {
            // If nav is collasped, first open the nav
            if (this._verticalNavService.collapsed) {
                this._verticalNavService.collapsed = false;
            }
            // then expand the nav group
            this.expandGroup();
        }
    };
    // TODO: FIXME: This is horrible. I really need to refactor VerticalNavGroup
    // but I have spent way too much time on VerticalNav and I don't have the patience
    // to do it right now. Have tested that it works and does not cause any side-effects
    VerticalNavGroup.prototype.onNavContentClick = function () {
        if (this._verticalNavService.collapsible && this._verticalNavService.collapsed) {
            this.expandGroup();
        }
    };
    VerticalNavGroup.prototype.ngAfterContentInit = function () {
        // This makes sure that if someone marks a nav group expanded in a collapsed nav
        // the expanded property is switched back to collapsed state.
        if (this._verticalNavService.collapsed && this.expanded) {
            this.wasExpanded = true;
            this.expandAnimationState = COLLAPSED_STATE;
        }
    };
    VerticalNavGroup.prototype.ngOnDestroy = function () {
        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
        this._verticalNavGroupService.unregisterNavGroup(this);
    };
    return VerticalNavGroup;
}());
export { VerticalNavGroup };
VerticalNavGroup.decorators = [
    { type: Component, args: [{
                selector: "clr-vertical-nav-group",
                template: "\n      <div class=\"nav-group-content\" (click)=\"onNavContentClick()\">\n          <ng-content select=\"[clrVerticalNavIcon]\"></ng-content>\n          <ng-content select=\"[clrVerticalNavLink]\"></ng-content>\n          <div class=\"nav-group-text\">\n              <ng-content></ng-content>\n          </div>\n          <button\n              class=\"nav-group-trigger\"\n              type=\"button\"\n              (click)=\"toggleExpand()\">\n              <clr-icon shape=\"caret\"\n                        [attr.dir]=\"(this.expanded) ? 'down' : 'right'\"></clr-icon>\n          </button>\n      </div>\n      <!--TODO: This animation needs to be added to the clr-vertical-nav-group-children component-->\n      <div class=\"nav-group-children\"\n           [@clrExpand]=\"expandAnimationState\"\n           (@clrExpand.done)=\"expandAnimationDone($event)\">\n          <ng-content select=\"[clrIfExpanded], clr-vertical-nav-group-children\"></ng-content>\n      </div>\n    ",
                providers: [Expand],
                animations: [trigger("clrExpand", [
                        state(EXPANDED_STATE, style({ "height": "*" })),
                        state(COLLAPSED_STATE, style({ "height": 0, "overflow-y": "hidden" })),
                        transition(EXPANDED_STATE + " <=> " + COLLAPSED_STATE, animate("0.2s ease-in-out"))
                    ])],
                host: { "class": "nav-group" }
            },] },
];
/** @nocollapse */
VerticalNavGroup.ctorParameters = function () { return [
    { type: Expand, },
    { type: VerticalNavGroupService, },
    { type: VerticalNavService, },
]; };
VerticalNavGroup.propDecorators = {
    'expanded': [{ type: HostBinding, args: ["class.is-expanded",] },],
    'userExpandedInput': [{ type: Input, args: ["clrVerticalNavGroupExpanded",] },],
    'expandedChange': [{ type: Output, args: ["clrVerticalNavGroupExpandedChange",] },],
};
//# sourceMappingURL=vertical-nav-group.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, Injector, Input, Optional, SkipSelf } from "@angular/core";
import { AbstractPopover } from "../common/abstract-popover";
import { Point } from "../common/popover";
var DropdownMenu = (function (_super) {
    __extends(DropdownMenu, _super);
    function DropdownMenu(injector, parentHost, nested) {
        var _this = _super.call(this, injector, parentHost) || this;
        if (!nested) {
            // Default positioning for normal dropdown is bottom-left
            _this.anchorPoint = Point.BOTTOM_LEFT;
            _this.popoverPoint = Point.LEFT_TOP;
        }
        else {
            // Default positioning for nested dropdown is right-top
            _this.anchorPoint = Point.RIGHT_TOP;
            _this.popoverPoint = Point.LEFT_TOP;
        }
        _this.popoverOptions.allowMultipleOpen = true;
        _this.closeOnOutsideClick = true;
        return _this;
    }
    Object.defineProperty(DropdownMenu.prototype, "position", {
        set: function (position) {
            // set the popover values based on menu position
            switch (position) {
                case ("top-right"):
                    this.anchorPoint = Point.TOP_RIGHT;
                    this.popoverPoint = Point.RIGHT_BOTTOM;
                    break;
                case ("top-left"):
                    this.anchorPoint = Point.TOP_LEFT;
                    this.popoverPoint = Point.LEFT_BOTTOM;
                    break;
                case ("bottom-right"):
                    this.anchorPoint = Point.BOTTOM_RIGHT;
                    this.popoverPoint = Point.RIGHT_TOP;
                    break;
                case ("bottom-left"):
                    this.anchorPoint = Point.BOTTOM_LEFT;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
                case ("right-top"):
                    this.anchorPoint = Point.RIGHT_TOP;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
                case ("right-bottom"):
                    this.anchorPoint = Point.RIGHT_BOTTOM;
                    this.popoverPoint = Point.LEFT_BOTTOM;
                    break;
                case ("left-top"):
                    this.anchorPoint = Point.LEFT_TOP;
                    this.popoverPoint = Point.RIGHT_TOP;
                    break;
                case ("left-bottom"):
                    this.anchorPoint = Point.LEFT_BOTTOM;
                    this.popoverPoint = Point.RIGHT_BOTTOM;
                    break;
                default:
                    this.anchorPoint = Point.BOTTOM_LEFT;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    return DropdownMenu;
}(AbstractPopover));
export { DropdownMenu };
DropdownMenu.decorators = [
    { type: Component, args: [{
                selector: "clr-dropdown-menu",
                template: "\n        <ng-content></ng-content>\n    ",
                host: {
                    "[class.dropdown-menu]": "true",
                }
            },] },
];
/** @nocollapse */
DropdownMenu.ctorParameters = function () { return [
    { type: Injector, },
    { type: ElementRef, decorators: [{ type: SkipSelf },] },
    { type: DropdownMenu, decorators: [{ type: Optional }, { type: SkipSelf },] },
]; };
DropdownMenu.propDecorators = {
    'position': [{ type: Input, args: ["clrPosition",] },],
};
//# sourceMappingURL=dropdown-menu.js.map
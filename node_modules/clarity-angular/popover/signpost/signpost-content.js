var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * Copyright (c) 2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, Injector, Input, SkipSelf } from "@angular/core";
import { AbstractPopover } from "../common/abstract-popover";
import { SIGNPOST_POSITIONS } from "./signpost-positions";
// aka where the arrow / pointer is at in relation to the anchor
var POSITIONS = [
    "top-left",
    "top-middle",
    "top-right",
    "right-top",
    "right-middle",
    "right-bottom",
    "bottom-right",
    "bottom-middle",
    "bottom-left",
    "left-bottom",
    "left-middle",
    "left-top",
];
var SignpostContent = (function (_super) {
    __extends(SignpostContent, _super);
    function SignpostContent(injector, parentHost) {
        var _this = _super.call(this, injector, parentHost) || this;
        // Defaults
        _this.position = "right-middle";
        _this.closeOnOutsideClick = true;
        return _this;
    }
    /**********
     * @function close
     *
     * @description
     * Close function that uses the signpost instance to toggle the state of the content popover.
     *
     */
    SignpostContent.prototype.close = function () {
        this.ifOpenService.open = false;
    };
    Object.defineProperty(SignpostContent.prototype, "position", {
        get: function () {
            return this._position;
        },
        /*********
         * @function set position
         *
         * @description
         * A setter for the position of the SignpostContent popover. This is a combination of the following:
         * - anchorPoint - where on the trigger to anchor the SignpostContent
         * - popoverPoint - where on the SignpostContent container to align with the anchorPoint
         * - offsetY - where on the Y axis to align the SignpostContent so it meets specs
         * - offsetX - where on the X axis to align the SignpostContent so it meets specs
         * There are 12 possible positions to place a SignpostContent container:
         * - top-left
         * - top-middle
         * - top-right
         * - right-top
         * - right-middle
         * - right-bottom
         * - bottom-right
         * - bottom-middle
         * - bottom-left
         * - left-bottom
         * - left-middle
         * - left-top
         *
         * I think of it as follows for 'top-left' -> CONTAINER_SIDE-SIDE_POSITION. In this case CONTAINER_SIDE is 'top'
         * meaning the top of the trigger icon (above the icon that hides/shows) the SignpostContent. And, SIDE_POSITION is
         * 'left' meaning two things: 1) the SignpostContent container extends to the left and 2) the 'arrow/pointer'
         * linking the SingpostContent to the trigger points down at the horizontal center of the trigger icon.
         *
         * @param newPosition
         */
        set: function (position) {
            // Ugh
            this.renderer.removeClass(this.el.nativeElement, this.position);
            if (position && (POSITIONS.indexOf(position) > -1)) {
                this._position = position;
            }
            else {
                this._position = "right-middle";
            }
            // Ugh
            this.renderer.addClass(this.el.nativeElement, this.position);
            var setPosition = SIGNPOST_POSITIONS[this.position];
            this.anchorPoint = setPosition.anchorPoint;
            this.popoverPoint = setPosition.popoverPoint;
            this.popoverOptions.offsetY = setPosition.offsetY;
            this.popoverOptions.offsetX = setPosition.offsetX;
        },
        enumerable: true,
        configurable: true
    });
    return SignpostContent;
}(AbstractPopover));
export { SignpostContent };
SignpostContent.decorators = [
    { type: Component, args: [{
                selector: "clr-signpost-content",
                template: "\n        <div class=\"signpost-flex-wrap\">\n            <div class=\"popover-pointer\"></div>\n            <div class=\"signpost-content-header\">\n                <button type=\"button\" class=\"signpost-action close\" aria-label=\"Close\" (click)=\"close()\">\n                    <clr-icon aria-hidden=\"true\" shape=\"close\"></clr-icon>\n                </button>\n            </div>\n            <div class=\"signpost-content-body\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    ",
                host: { "[class.signpost-content]": "true" }
            },] },
];
/** @nocollapse */
SignpostContent.ctorParameters = function () { return [
    { type: Injector, },
    { type: ElementRef, decorators: [{ type: SkipSelf },] },
]; };
SignpostContent.propDecorators = {
    'position': [{ type: Input, args: ["clrPosition",] },],
};
//# sourceMappingURL=signpost-content.js.map
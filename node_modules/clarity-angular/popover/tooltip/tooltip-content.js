var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * Copyright (c) 2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, Injector, Input, SkipSelf } from "@angular/core";
import { AbstractPopover } from "../common/abstract-popover";
import { Point } from "../common/popover";
var POSITIONS = ["bottom-left", "bottom-right", "top-left", "top-right", "right", "left"];
var SIZES = ["xs", "sm", "md", "lg"];
var TooltipContent = (function (_super) {
    __extends(TooltipContent, _super);
    function TooltipContent(injector, parentHost) {
        var _this = _super.call(this, injector, parentHost) || this;
        // Defaults
        _this.position = "right";
        _this.size = "sm";
        return _this;
    }
    Object.defineProperty(TooltipContent.prototype, "position", {
        get: function () {
            return this._position;
        },
        set: function (position) {
            // Ugh
            this.renderer.removeClass(this.el.nativeElement, "tooltip-" + this.position);
            if (position && (POSITIONS.indexOf(position) > -1)) {
                this._position = position;
            }
            else {
                this._position = "right";
            }
            // Ugh
            this.renderer.addClass(this.el.nativeElement, "tooltip-" + this.position);
            // set the popover values based on direction
            switch (position) {
                case ("top-right"):
                    this.anchorPoint = Point.TOP_CENTER;
                    this.popoverPoint = Point.LEFT_BOTTOM;
                    break;
                case ("top-left"):
                    this.anchorPoint = Point.TOP_CENTER;
                    this.popoverPoint = Point.RIGHT_BOTTOM;
                    break;
                case ("bottom-right"):
                    this.anchorPoint = Point.BOTTOM_CENTER;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
                case ("bottom-left"):
                    this.anchorPoint = Point.BOTTOM_CENTER;
                    this.popoverPoint = Point.RIGHT_TOP;
                    break;
                case ("right"):
                    this.anchorPoint = Point.RIGHT_CENTER;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
                case ("left"):
                    this.anchorPoint = Point.LEFT_CENTER;
                    this.popoverPoint = Point.RIGHT_TOP;
                    break;
                default:
                    this.anchorPoint = Point.RIGHT_CENTER;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipContent.prototype, "size", {
        get: function () {
            return this._size;
        },
        set: function (size) {
            // Ugh
            this.renderer.removeClass(this.el.nativeElement, "tooltip-" + this.size);
            if (size && (SIZES.indexOf(size) > -1)) {
                this._size = size;
            }
            else {
                this._size = "sm";
            }
            // Ugh
            this.renderer.addClass(this.el.nativeElement, "tooltip-" + this.size);
        },
        enumerable: true,
        configurable: true
    });
    return TooltipContent;
}(AbstractPopover));
export { TooltipContent };
TooltipContent.decorators = [
    { type: Component, args: [{
                selector: "clr-tooltip-content",
                template: "\n        <ng-content></ng-content>\n    ",
                host: {
                    "[class.tooltip-content]": "true",
                    // I'm giving up on animation, they did not work before and will not work now.
                    // Too many conflicts with Clarity UI.
                    "[style.opacity]": "1"
                }
            },] },
];
/** @nocollapse */
TooltipContent.ctorParameters = function () { return [
    { type: Injector, },
    { type: ElementRef, decorators: [{ type: SkipSelf },] },
]; };
TooltipContent.propDecorators = {
    'position': [{ type: Input, args: ["clrPosition",] },],
    'size': [{ type: Input, args: ["clrSize",] },],
};
//# sourceMappingURL=tooltip-content.js.map
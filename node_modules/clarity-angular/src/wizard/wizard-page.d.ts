import { EventEmitter, TemplateRef, OnInit } from "@angular/core";
import { Subscription } from "rxjs/Subscription";
import { WizardNavigationService } from "./providers/wizard-navigation";
import { PageCollectionService } from "./providers/page-collection";
import { ButtonHubService } from "./providers/button-hub";
import { WizardPageTitleDirective } from "./directives/page-title";
import { WizardPageNavTitleDirective } from "./directives/page-navtitle";
import { WizardPageButtonsDirective } from "./directives/page-buttons";
import { WizardPageHeaderActionsDirective } from "./directives/page-header-actions";
export declare class WizardPage implements OnInit {
    private navService;
    pageCollection: PageCollectionService;
    buttonService: ButtonHubService;
    previousButtonSubscription: Subscription;
    nextButtonSubscription: Subscription;
    dangerButtonSubscription: Subscription;
    finishButtonSubscription: Subscription;
    customButtonSubscription: Subscription;
    constructor(navService: WizardNavigationService, pageCollection: PageCollectionService, buttonService: ButtonHubService);
    pageTitle: WizardPageTitleDirective;
    pageNavTitle: WizardPageNavTitleDirective;
    _buttons: WizardPageButtonsDirective;
    _headerActions: WizardPageHeaderActionsDirective;
    private _nextStepDisabled;
    nextStepDisabled: boolean;
    nextStepDisabledChange: EventEmitter<boolean>;
    private _previousStepDisabled;
    previousStepDisabled: boolean;
    previousStepDisabledChange: EventEmitter<boolean>;
    preventDefault: boolean;
    private _stopCancel;
    stopCancel: boolean;
    stopCancelChange: EventEmitter<boolean>;
    private _stopNext;
    stopNext: boolean;
    onCommit: EventEmitter<string>;
    onLoad: EventEmitter<string>;
    pageOnCancel: EventEmitter<WizardPage>;
    finishButtonClicked: EventEmitter<WizardPage>;
    previousButtonClicked: EventEmitter<WizardPage>;
    nextButtonClicked: EventEmitter<WizardPage>;
    dangerButtonClicked: EventEmitter<WizardPage>;
    primaryButtonClicked: EventEmitter<string>;
    customButtonClicked: EventEmitter<string>;
    _id: any;
    readonly id: string;
    readonly readyToComplete: boolean;
    private _complete;
    completed: boolean;
    readonly current: boolean;
    readonly disabled: boolean;
    readonly enabled: boolean;
    readonly previousCompleted: boolean;
    readonly title: TemplateRef<any>;
    readonly navTitle: TemplateRef<any>;
    readonly headerActions: TemplateRef<any>;
    readonly hasHeaderActions: boolean;
    readonly buttons: TemplateRef<any>;
    readonly hasButtons: boolean;
    makeCurrent(): void;
    ngOnInit(): void;
    readonly stepItemId: string;
}

import { EventEmitter, QueryList, OnInit, OnDestroy, AfterContentInit, DoCheck, IterableDiffers, ElementRef } from "@angular/core";
import { WizardPage } from "./wizard-page";
import { WizardHeaderAction } from "./wizard-header-action";
import { WizardNavigationService } from "./providers/wizard-navigation";
import { PageCollectionService } from "./providers/page-collection";
import { ButtonHubService } from "./providers/button-hub";
import { HeaderActionService } from "./providers/header-actions";
export declare class Wizard implements OnInit, OnDestroy, AfterContentInit, DoCheck {
    navService: WizardNavigationService;
    pageCollection: PageCollectionService;
    buttonService: ButtonHubService;
    headerActionService: HeaderActionService;
    private elementRef;
    private differs;
    constructor(navService: WizardNavigationService, pageCollection: PageCollectionService, buttonService: ButtonHubService, headerActionService: HeaderActionService, elementRef: ElementRef, differs: IterableDiffers);
    differ: any;
    size: string;
    showGhostPages: boolean;
    closable: boolean;
    _open: boolean;
    _openChanged: EventEmitter<boolean>;
    onCancel: EventEmitter<any>;
    wizardFinished: EventEmitter<any>;
    onReset: EventEmitter<any>;
    pages: QueryList<WizardPage>;
    headerActions: QueryList<WizardHeaderAction>;
    currentPageChanged: EventEmitter<any>;
    onMoveNext: EventEmitter<any>;
    onMovePrevious: EventEmitter<any>;
    stopNext: boolean;
    stopCancel: boolean;
    _stopModalAnimations: boolean;
    readonly stopModalAnimations: string;
    ngOnInit(): void;
    private goNextSubscription;
    private goPreviousSubscription;
    private cancelSubscription;
    private currentPageSubscription;
    private wizardFinishedSubscription;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    readonly isStatic: boolean;
    readonly currentPage: WizardPage;
    readonly isLast: boolean;
    readonly isFirst: boolean;
    open(): void;
    close(): void;
    toggle(value: boolean): void;
    prev(): void;
    previous(): void;
    next(): void;
    finish(): void;
    forceFinish(): void;
    forceNext(): void;
    cancel(): void;
    modalCancel(): void;
    checkAndCancel(): void;
    goTo(pageId: string): void;
    reset(): void;
    readonly ghostPageState: string;
    deactivateGhostPages(): void;
    setGhostPages(deactivateOrNot?: string): void;
}

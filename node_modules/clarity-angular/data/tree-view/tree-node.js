/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { animate, state, style, transition, trigger } from "@angular/animations";
import { Component, EventEmitter, Input, Optional, Output, SkipSelf } from "@angular/core";
import { Expand } from "../../utils/expand/providers/expand";
import { LoadingListener } from "../../utils/loading/loading-listener";
import { AbstractTreeSelection } from "./abstract-tree-selection";
import { clrTreeSelectionProviderFactory } from "./providers/tree-selection.provider";
import { TreeSelectionService } from "./providers/tree-selection.service";
var TreeNode = (function (_super) {
    __extends(TreeNode, _super);
    function TreeNode(nodeExpand, parent, treeSelectionService) {
        var _this = _super.call(this, parent) || this;
        _this.nodeExpand = nodeExpand;
        _this.parent = parent;
        _this.treeSelectionService = treeSelectionService;
        _this._children = [];
        _this.nodeSelectedChange = new EventEmitter(true);
        _this.nodeIndeterminateChanged = new EventEmitter(true);
        if (_this.parent) {
            _this.parent.register(_this);
        }
        return _this;
    }
    Object.defineProperty(TreeNode.prototype, "children", {
        get: function () {
            return this._children;
        },
        enumerable: true,
        configurable: true
    });
    /* Registration */
    TreeNode.prototype.checkIfChildNodeRegistered = function (node) {
        return (this.children.indexOf(node) > -1);
    };
    // TODO: This should ideally be in AbstractTreeSelection
    // Tried doing this but ran into some issues and also ran out of time.
    // Will get this done later.
    TreeNode.prototype.register = function (node) {
        if (!this.checkIfChildNodeRegistered(node)) {
            this.children.push(node);
            if (this.selectable) {
                if (this.selected) {
                    node.parentChanged(this.selected);
                }
            }
        }
    };
    // TODO: This should ideally be in AbstractTreeSelection
    // Tried doing this but ran into some issues and also ran out of time.
    // Will get this done later.
    TreeNode.prototype.unregister = function (node) {
        var index = this.children.indexOf(node);
        if (index > -1) {
            this.children.splice(index, 1);
        }
    };
    /* Selection */
    TreeNode.prototype.activateSelection = function () {
        if (this.treeSelectionService && !this.treeSelectionService.selectable) {
            this.treeSelectionService.selectable = true;
        }
    };
    Object.defineProperty(TreeNode.prototype, "nodeSelected", {
        set: function (value) {
            // required for recursive trees to discard unset inputs.
            this.activateSelection();
            if (value === undefined || value === null) {
                return;
            }
            if (this.selected !== value) {
                this.selected = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    TreeNode.prototype.selectedChanged = function () {
        this.nodeSelectedChange.emit(this.selected);
    };
    Object.defineProperty(TreeNode.prototype, "selectable", {
        get: function () {
            if (this.treeSelectionService) {
                return this.treeSelectionService.selectable;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "nodeIndeterminate", {
        set: function (value) {
            this.indeterminate = value;
            this.activateSelection();
        },
        enumerable: true,
        configurable: true
    });
    TreeNode.prototype.indeterminateChanged = function () {
        this.nodeIndeterminateChanged.emit(this.indeterminate);
    };
    /* Expansion */
    TreeNode.prototype.toggleExpand = function () {
        this.nodeExpand.expanded = !this.nodeExpand.expanded;
    };
    Object.defineProperty(TreeNode.prototype, "caretDirection", {
        get: function () {
            return (this.nodeExpand.expanded) ? "down" : "right";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "expanded", {
        get: function () {
            return this.nodeExpand.expanded;
        },
        set: function (value) {
            value = !!value;
            if (this.nodeExpand.expanded !== value) {
                this.nodeExpand.expanded = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "state", {
        get: function () {
            return (this.expanded && !this.nodeExpand.loading) ? "expanded" : "collapsed";
        },
        enumerable: true,
        configurable: true
    });
    /* Lifecycle */
    TreeNode.prototype.ngOnDestroy = function () {
        if (this.parent) {
            this.parent.unregister(this);
        }
    };
    return TreeNode;
}(AbstractTreeSelection));
export { TreeNode };
TreeNode.decorators = [
    { type: Component, args: [{
                selector: "clr-tree-node",
                template: "\n      <button\n          type=\"button\"\n          class=\"clr-treenode-caret\"\n          (click)=\"toggleExpand()\"\n          *ngIf=\"nodeExpand.expandable && !nodeExpand.loading\">\n          <clr-icon\n              shape=\"caret\"\n              [attr.dir]=\"caretDirection\"></clr-icon>\n      </button>\n      <span class=\"clr-treenode-spinner spinner\" *ngIf=\"nodeExpand.expandable && nodeExpand.loading\">\n          Loading...\n      </span>\n      <clr-checkbox\n          *ngIf=\"selectable\"\n          [(ngModel)]=\"selected\"\n          [(clrIndeterminate)]=\"indeterminate\"></clr-checkbox>\n      <div class=\"clr-treenode-content\">\n          <ng-content></ng-content>\n      </div>\n      <!-- FIXME: remove this string concatenation when boolean states are supported -->\n      <div\n          class=\"clr-treenode-children\"\n          [@childNodesState]=\"state\">\n          <ng-content select=\"clr-tree-node\"></ng-content>\n          <ng-content select=\"[clrIfExpanded]\"></ng-content>\n      </div>\n    ",
                providers: [
                    Expand, { provide: LoadingListener, useExisting: Expand }, {
                        provide: TreeSelectionService,
                        useFactory: clrTreeSelectionProviderFactory,
                        deps: [[new Optional(), new SkipSelf(), TreeSelectionService]]
                    }
                ],
                animations: [trigger("childNodesState", [
                        state("expanded", style({ "height": "*", "overflow-y": "hidden" })),
                        state("collapsed", style({ "height": 0, "overflow-y": "hidden" })),
                        transition("expanded <=> collapsed", animate("0.2s ease-in-out"))
                    ])]
            },] },
];
/** @nocollapse */
TreeNode.ctorParameters = function () { return [
    { type: Expand, },
    { type: TreeNode, decorators: [{ type: Optional }, { type: SkipSelf },] },
    { type: TreeSelectionService, },
]; };
TreeNode.propDecorators = {
    'nodeSelected': [{ type: Input, args: ["clrSelected",] },],
    'nodeSelectedChange': [{ type: Output, args: ["clrSelectedChange",] },],
    'nodeIndeterminate': [{ type: Input, args: ["clrIndeterminate",] },],
    'nodeIndeterminateChanged': [{ type: Output, args: ["clrIndeterminateChange",] },],
};
//# sourceMappingURL=tree-node.js.map
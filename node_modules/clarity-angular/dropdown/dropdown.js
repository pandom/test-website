/*
 * Copyright (c) 2016 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, EventEmitter, HostListener, Input, Output } from "@angular/core";
import { Point } from "../popover/popover";
import { menuPositions } from "./menu-positions";
// TODO: the ng-content inside the dropdown-menu should ideally just be
// <ng-content select="clr-dropdown-menu"></ng-content>. Remove .dropdown-menu in 1.0?
var Dropdown = (function () {
    function Dropdown(elementRef) {
        this.elementRef = elementRef;
        this._open = false;
        this._openChanged = new EventEmitter(false);
        this.isMenuClosable = true;
        this.anchorPoint = Point.BOTTOM_LEFT; // default if menuPosition isn't set
        this.popoverPoint = Point.LEFT_TOP; // default if menuPosition isn't set
        this.anchor = elementRef.nativeElement;
    }
    Object.defineProperty(Dropdown.prototype, "menuPosition", {
        set: function (pos) {
            if (pos && (menuPositions.indexOf(pos) > -1)) {
                this._menuPosition = pos;
            }
            else {
                this._menuPosition = "bottom-left";
            }
            // set the popover values based on menu position
            switch (this._menuPosition) {
                case ("top-right"):
                    this.anchorPoint = Point.TOP_RIGHT;
                    this.popoverPoint = Point.RIGHT_BOTTOM;
                    break;
                case ("top-left"):
                    this.anchorPoint = Point.TOP_LEFT;
                    this.popoverPoint = Point.LEFT_BOTTOM;
                    break;
                case ("bottom-right"):
                    this.anchorPoint = Point.BOTTOM_RIGHT;
                    this.popoverPoint = Point.RIGHT_TOP;
                    break;
                case ("bottom-left"):
                    this.anchorPoint = Point.BOTTOM_LEFT;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
                case ("right-top"):
                    this.anchorPoint = Point.RIGHT_TOP;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
                case ("right-bottom"):
                    this.anchorPoint = Point.RIGHT_BOTTOM;
                    this.popoverPoint = Point.LEFT_BOTTOM;
                    break;
                case ("left-top"):
                    this.anchorPoint = Point.LEFT_TOP;
                    this.popoverPoint = Point.RIGHT_TOP;
                    break;
                case ("left-bottom"):
                    this.anchorPoint = Point.LEFT_BOTTOM;
                    this.popoverPoint = Point.RIGHT_BOTTOM;
                    break;
                default:
                    this.anchorPoint = Point.BOTTOM_LEFT;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Dropdown.prototype.toggleDropdown = function () {
        this.open = !this.open;
    };
    Object.defineProperty(Dropdown.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (val) {
            this._open = val;
            this._openChanged.emit(val);
        },
        enumerable: true,
        configurable: true
    });
    //called on mouse clicks anywhere in the DOM.
    //Checks to see if the mouseclick happened on the host or outside
    Dropdown.prototype.onMouseClick = function (target) {
        if (this._open) {
            var current = target; //Get the element in the DOM on which the mouse was clicked
            var dropdownHost = this.elementRef.nativeElement; //Get the current dropdown native HTML element
            //Start checking if current and dropdownHost are equal. If not traverse to the parentNode and check again.
            while (current) {
                if (current === dropdownHost) {
                    return;
                }
                current = current.parentNode;
            }
            this._open = false; //Remove .open from the dropdown
        }
    };
    return Dropdown;
}());
export { Dropdown };
Dropdown.decorators = [
    { type: Component, args: [{
                selector: "clr-dropdown",
                template: "\n        <ng-content select=\"[clrDropdownToggle]\"></ng-content>\n        <ng-template [(clrPopover)]=\"open\" [clrPopoverAnchor]=\"anchor\" [clrPopoverAnchorPoint]=\"anchorPoint\"\n                     [clrPopoverPopoverPoint]=\"popoverPoint\">\n            <div class=\"dropdown-menu\">\n                <ng-content select=\"[clr-dropdown-menu, .dropdown-menu]\"></ng-content>\n            </div>\n        </ng-template>\n    ",
                host: {
                    "[class.dropdown]": "true",
                    "[class.open]": "true" // always set to true; clrPopover will remove it from DOM when not open
                }
            },] },
];
/** @nocollapse */
Dropdown.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
Dropdown.propDecorators = {
    '_open': [{ type: Input, args: ["clrDropdownMenuOpen",] },],
    '_openChanged': [{ type: Output, args: ["clrDropdownMenuOpenChange",] },],
    'isMenuClosable': [{ type: Input, args: ["clrCloseMenuOnItemClick",] },],
    'menuPosition': [{ type: Input, args: ["clrMenuPosition",] },],
    'onMouseClick': [{ type: HostListener, args: ["document:click", ["$event.target"],] },],
};
//# sourceMappingURL=dropdown.js.map
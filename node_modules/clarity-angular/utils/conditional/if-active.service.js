/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable, InjectionToken } from "@angular/core";
import { Subject } from "rxjs/Subject";
var activeCounter = 0;
export var IF_ACTIVE_ID = new InjectionToken("IF_ACTIVE_ID");
export function tokenFactory() {
    return ++activeCounter;
}
export var IF_ACTIVE_ID_PROVIDER = {
    provide: IF_ACTIVE_ID,
    useFactory: tokenFactory
};
/*********
 * @class IfActiveService
 *
 * @description
 * An injectable service used by IfActive structural directives and the components that implement IfActive in their
 * templates. It holds the value of the current state and provides an Observable that both the directive and the
 * implementing component can subscribe to in order to take action on current value changes.
 *
 */
var IfActiveService = (function () {
    function IfActiveService() {
        /********
         * @property _currentChange
         *
         * @description
         * A RXJS Subject that updates and provides subscriptions to for the current current state of a component template
         * implemting the IfActive structural directive.
         *
         * @type {Subject<any>}
         * @private
         */
        this._currentChange = new Subject();
    }
    Object.defineProperty(IfActiveService.prototype, "currentChange", {
        /*********
         * @function currentChange
         *
         * @description
         * A getter function that provides an observable for the _current Subject.
         *
         * @returns {Observable<number>}
         */
        get: function () {
            return this._currentChange.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IfActiveService.prototype, "current", {
        /*********
         *
         * @function current
         *
         * @description
         * A getter that returns the current value of this IfActive instance.
         * @returns {number}
         */
        get: function () {
            return this._current;
        },
        /*********
         * @function current
         *
         * @description
         * A setter function that updates the current state of _current for this instance of IfActive structural directive.
         * And, broadcasts the new value to all subscribers.
         *
         * @param value
         */
        set: function (value) {
            if (this._current !== value) {
                this._current = value;
                this._currentChange.next(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    return IfActiveService;
}());
export { IfActiveService };
IfActiveService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
IfActiveService.ctorParameters = function () { return []; };
//# sourceMappingURL=if-active.service.js.map